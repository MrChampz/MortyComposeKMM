// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.upco.playground.mortycomposekmm.shared

import com.apollographql.apollo.api.Input
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import com.upco.playground.mortycomposekmm.shared.fragment.EpisodeDetail
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class GetEpisodesQuery(
  val page: Input<Int> = Input.absent()
) : Query<GetEpisodesQuery.Data, GetEpisodesQuery.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      if (this@GetEpisodesQuery.page.defined) {
        this["page"] = this@GetEpisodesQuery.page.value
      }
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      if (this@GetEpisodesQuery.page.defined) {
        writer.writeInt("page", this@GetEpisodesQuery.page.value)
      }
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class Info(
    val __typename: String = "Info",
    /**
     * The length of the response.
     */
    val count: Int?,
    /**
     * The amount of pages.
     */
    val pages: Int?,
    /**
     * Number of the next page (if it exists)
     */
    val next: Int?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Info.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Info.count)
      writer.writeInt(RESPONSE_FIELDS[2], this@Info.pages)
      writer.writeInt(RESPONSE_FIELDS[3], this@Info.next)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("count", "count", null, true, null),
          ResponseField.forInt("pages", "pages", null, true, null),
          ResponseField.forInt("next", "next", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Info = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val count = readInt(RESPONSE_FIELDS[1])
        val pages = readInt(RESPONSE_FIELDS[2])
        val next = readInt(RESPONSE_FIELDS[3])
        Info(
          __typename = __typename,
          count = count,
          pages = pages,
          next = next
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Info> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Result(
    val __typename: String = "Episode",
    val fragments: Fragments
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Result.__typename)
      this@Result.fragments.marshaller().marshal(writer)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("__typename", "__typename", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Result = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val fragments = Fragments(reader)
        Result(
          __typename = __typename,
          fragments = fragments
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Result> = ResponseFieldMapper { invoke(it) }
    }

    data class Fragments(
      val episodeDetail: EpisodeDetail
    ) {
      fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
        writer.writeFragment(this@Fragments.episodeDetail.marshaller())
      }

      companion object {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.forFragment("__typename", "__typename", null)
            )

        operator fun invoke(reader: ResponseReader): Fragments = reader.run {
          val episodeDetail = readFragment<EpisodeDetail>(RESPONSE_FIELDS[0]) { reader ->
            EpisodeDetail(reader)
          }!!
          Fragments(
            episodeDetail = episodeDetail
          )
        }

        @Suppress("FunctionName")
        fun Mapper(): ResponseFieldMapper<Fragments> = ResponseFieldMapper { invoke(it) }
      }
    }
  }

  data class Episodes(
    val __typename: String = "Episodes",
    val info: Info?,
    val results: List<Result?>?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Episodes.__typename)
      writer.writeObject(RESPONSE_FIELDS[1], this@Episodes.info?.marshaller())
      writer.writeList(RESPONSE_FIELDS[2], this@Episodes.results) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
    }

    fun resultsFilterNotNull(): List<Result>? = results?.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forObject("info", "info", null, true, null),
          ResponseField.forList("results", "results", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Episodes = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val info = readObject<Info>(RESPONSE_FIELDS[1]) { reader ->
          Info(reader)
        }
        val results = readList<Result>(RESPONSE_FIELDS[2]) { reader ->
          reader.readObject<Result> { reader ->
            Result(reader)
          }
        }
        Episodes(
          __typename = __typename,
          info = info,
          results = results
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Episodes> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    /**
     * Get the list of all episodes
     */
    val episodes: Episodes?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.episodes?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("episodes", "episodes", mapOf<String, Any>(
            "page" to mapOf<String, Any>(
              "kind" to "Variable",
              "variableName" to "page")), true, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val episodes = readObject<Episodes>(RESPONSE_FIELDS[0]) { reader ->
          Episodes(reader)
        }
        Data(
          episodes = episodes
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "bea01df89608f6ae718efb88ac3bdc3e9bf733296cee741d1f35b884f0c76a0c"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query GetEpisodes(${'$'}page: Int) {
          |  episodes(page: ${'$'}page) {
          |    __typename
          |    info {
          |      __typename
          |      count
          |      pages
          |      next
          |    }
          |    results {
          |      __typename
          |      ...EpisodeDetail
          |    }
          |  }
          |}
          |fragment EpisodeDetail on Episode {
          |  __typename
          |  id
          |  name
          |  created
          |  air_date
          |  episode
          |  characters {
          |    __typename
          |    id
          |    name
          |    image
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "GetEpisodes"
    }
  }
}
