// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.upco.playground.mortycomposekmm.shared.fragment

import com.apollographql.apollo.api.GraphqlFragment
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.upco.playground.mortycomposekmm.shared.type.CustomType
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class LocationDetail(
  val __typename: String = "Location",
  /**
   * The id of the location.
   */
  val id: String?,
  /**
   * The name of the location.
   */
  val name: String?,
  /**
   * The type of the location.
   */
  val type: String?,
  /**
   * The dimension in which the location is located.
   */
  val dimension: String?,
  /**
   * List of characters who have been last seen in the location.
   */
  val residents: List<Resident?>?
) : GraphqlFragment {
  override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
    writer.writeString(RESPONSE_FIELDS[0], this@LocationDetail.__typename)
    writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@LocationDetail.id)
    writer.writeString(RESPONSE_FIELDS[2], this@LocationDetail.name)
    writer.writeString(RESPONSE_FIELDS[3], this@LocationDetail.type)
    writer.writeString(RESPONSE_FIELDS[4], this@LocationDetail.dimension)
    writer.writeList(RESPONSE_FIELDS[5], this@LocationDetail.residents) { value, listItemWriter ->
      value?.forEach { value ->
        listItemWriter.writeObject(value?.marshaller())}
    }
  }

  fun residentsFilterNotNull(): List<Resident>? = residents?.filterNotNull()

  companion object {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
        ResponseField.forString("name", "name", null, true, null),
        ResponseField.forString("type", "type", null, true, null),
        ResponseField.forString("dimension", "dimension", null, true, null),
        ResponseField.forList("residents", "residents", null, true, null)
        )

    val FRAGMENT_DEFINITION: String = """
        |fragment LocationDetail on Location {
        |  __typename
        |  id
        |  name
        |  type
        |  dimension
        |  residents {
        |    __typename
        |    id
        |    name
        |    image
        |  }
        |}
        """.trimMargin()

    operator fun invoke(reader: ResponseReader): LocationDetail = reader.run {
      val __typename = readString(RESPONSE_FIELDS[0])!!
      val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
      val name = readString(RESPONSE_FIELDS[2])
      val type = readString(RESPONSE_FIELDS[3])
      val dimension = readString(RESPONSE_FIELDS[4])
      val residents = readList<Resident>(RESPONSE_FIELDS[5]) { reader ->
        reader.readObject<Resident> { reader ->
          Resident(reader)
        }
      }
      LocationDetail(
        __typename = __typename,
        id = id,
        name = name,
        type = type,
        dimension = dimension,
        residents = residents
      )
    }

    @Suppress("FunctionName")
    fun Mapper(): ResponseFieldMapper<LocationDetail> = ResponseFieldMapper { invoke(it) }
  }

  data class Resident(
    val __typename: String = "Character",
    /**
     * The id of the character.
     */
    val id: String?,
    /**
     * The name of the character.
     */
    val name: String?,
    /**
     * Link to the character's image.
     * All images are 300x300px and most are medium shots or portraits since they are intended to be
     * used as avatars.
     */
    val image: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Resident.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Resident.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Resident.name)
      writer.writeString(RESPONSE_FIELDS[3], this@Resident.image)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
          ResponseField.forString("name", "name", null, true, null),
          ResponseField.forString("image", "image", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Resident = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val name = readString(RESPONSE_FIELDS[2])
        val image = readString(RESPONSE_FIELDS[3])
        Resident(
          __typename = __typename,
          id = id,
          name = name,
          image = image
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Resident> = ResponseFieldMapper { invoke(it) }
    }
  }
}
