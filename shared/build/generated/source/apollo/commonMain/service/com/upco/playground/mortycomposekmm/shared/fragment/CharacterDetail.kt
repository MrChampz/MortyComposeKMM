// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.upco.playground.mortycomposekmm.shared.fragment

import com.apollographql.apollo.api.GraphqlFragment
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.upco.playground.mortycomposekmm.shared.type.CustomType
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class CharacterDetail(
  val __typename: String = "Character",
  /**
   * The id of the character.
   */
  val id: String?,
  /**
   * The name of the character.
   */
  val name: String?,
  /**
   * Link to the character's image.
   * All images are 300x300px and most are medium shots or portraits since they are intended to be
   * used as avatars.
   */
  val image: String?,
  /**
   * The status of the character ('Alive', 'Dead' or 'unknown').
   */
  val status: String?,
  /**
   * The species of the character.
   */
  val species: String?,
  /**
   * The type or subspecies of the character.
   */
  val type: String?,
  /**
   * The gender of the character ('Female', 'Male', 'Genderless' or 'unknown').
   */
  val gender: String?,
  /**
   * Episodes in which this character appeared.
   */
  val episode: List<Episode?>?,
  /**
   * The character's last known location
   */
  val location: Location?,
  /**
   * The character's origin location
   */
  val origin: Origin?
) : GraphqlFragment {
  override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
    writer.writeString(RESPONSE_FIELDS[0], this@CharacterDetail.__typename)
    writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@CharacterDetail.id)
    writer.writeString(RESPONSE_FIELDS[2], this@CharacterDetail.name)
    writer.writeString(RESPONSE_FIELDS[3], this@CharacterDetail.image)
    writer.writeString(RESPONSE_FIELDS[4], this@CharacterDetail.status)
    writer.writeString(RESPONSE_FIELDS[5], this@CharacterDetail.species)
    writer.writeString(RESPONSE_FIELDS[6], this@CharacterDetail.type)
    writer.writeString(RESPONSE_FIELDS[7], this@CharacterDetail.gender)
    writer.writeList(RESPONSE_FIELDS[8], this@CharacterDetail.episode) { value, listItemWriter ->
      value?.forEach { value ->
        listItemWriter.writeObject(value?.marshaller())}
    }
    writer.writeObject(RESPONSE_FIELDS[9], this@CharacterDetail.location?.marshaller())
    writer.writeObject(RESPONSE_FIELDS[10], this@CharacterDetail.origin?.marshaller())
  }

  fun episodeFilterNotNull(): List<Episode>? = episode?.filterNotNull()

  companion object {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
        ResponseField.forString("name", "name", null, true, null),
        ResponseField.forString("image", "image", null, true, null),
        ResponseField.forString("status", "status", null, true, null),
        ResponseField.forString("species", "species", null, true, null),
        ResponseField.forString("type", "type", null, true, null),
        ResponseField.forString("gender", "gender", null, true, null),
        ResponseField.forList("episode", "episode", null, true, null),
        ResponseField.forObject("location", "location", null, true, null),
        ResponseField.forObject("origin", "origin", null, true, null)
        )

    val FRAGMENT_DEFINITION: String = """
        |fragment CharacterDetail on Character {
        |  __typename
        |  id
        |  name
        |  image
        |  status
        |  species
        |  type
        |  gender
        |  episode {
        |    __typename
        |    id
        |    name
        |    air_date
        |  }
        |  location {
        |    __typename
        |    id
        |    name
        |  }
        |  origin {
        |    __typename
        |    name
        |  }
        |}
        """.trimMargin()

    operator fun invoke(reader: ResponseReader): CharacterDetail = reader.run {
      val __typename = readString(RESPONSE_FIELDS[0])!!
      val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
      val name = readString(RESPONSE_FIELDS[2])
      val image = readString(RESPONSE_FIELDS[3])
      val status = readString(RESPONSE_FIELDS[4])
      val species = readString(RESPONSE_FIELDS[5])
      val type = readString(RESPONSE_FIELDS[6])
      val gender = readString(RESPONSE_FIELDS[7])
      val episode = readList<Episode>(RESPONSE_FIELDS[8]) { reader ->
        reader.readObject<Episode> { reader ->
          Episode(reader)
        }
      }
      val location = readObject<Location>(RESPONSE_FIELDS[9]) { reader ->
        Location(reader)
      }
      val origin = readObject<Origin>(RESPONSE_FIELDS[10]) { reader ->
        Origin(reader)
      }
      CharacterDetail(
        __typename = __typename,
        id = id,
        name = name,
        image = image,
        status = status,
        species = species,
        type = type,
        gender = gender,
        episode = episode,
        location = location,
        origin = origin
      )
    }

    @Suppress("FunctionName")
    fun Mapper(): ResponseFieldMapper<CharacterDetail> = ResponseFieldMapper { invoke(it) }
  }

  data class Episode(
    val __typename: String = "Episode",
    /**
     * The id of the episode.
     */
    val id: String?,
    /**
     * The name of the episode.
     */
    val name: String?,
    /**
     * The air date of the episode.
     */
    val air_date: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Episode.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Episode.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Episode.name)
      writer.writeString(RESPONSE_FIELDS[3], this@Episode.air_date)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
          ResponseField.forString("name", "name", null, true, null),
          ResponseField.forString("air_date", "air_date", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Episode = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val name = readString(RESPONSE_FIELDS[2])
        val air_date = readString(RESPONSE_FIELDS[3])
        Episode(
          __typename = __typename,
          id = id,
          name = name,
          air_date = air_date
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Episode> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Location(
    val __typename: String = "Location",
    /**
     * The id of the location.
     */
    val id: String?,
    /**
     * The name of the location.
     */
    val name: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Location.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Location.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Location.name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
          ResponseField.forString("name", "name", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Location = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val name = readString(RESPONSE_FIELDS[2])
        Location(
          __typename = __typename,
          id = id,
          name = name
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Location> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Origin(
    val __typename: String = "Location",
    /**
     * The name of the location.
     */
    val name: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Origin.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Origin.name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Origin = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val name = readString(RESPONSE_FIELDS[1])
        Origin(
          __typename = __typename,
          name = name
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Origin> = ResponseFieldMapper { invoke(it) }
    }
  }
}
