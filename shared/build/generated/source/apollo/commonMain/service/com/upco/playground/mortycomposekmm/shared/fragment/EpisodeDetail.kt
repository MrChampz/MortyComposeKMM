// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.upco.playground.mortycomposekmm.shared.fragment

import com.apollographql.apollo.api.GraphqlFragment
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.upco.playground.mortycomposekmm.shared.type.CustomType
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class EpisodeDetail(
  val __typename: String = "Episode",
  /**
   * The id of the episode.
   */
  val id: String?,
  /**
   * The name of the episode.
   */
  val name: String?,
  /**
   * Time at which the episode was created in the database.
   */
  val created: String?,
  /**
   * The air date of the episode.
   */
  val air_date: String?,
  /**
   * The code of the episode.
   */
  val episode: String?,
  /**
   * List of characters who have been seen in the episode.
   */
  val characters: List<Character?>?
) : GraphqlFragment {
  override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
    writer.writeString(RESPONSE_FIELDS[0], this@EpisodeDetail.__typename)
    writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@EpisodeDetail.id)
    writer.writeString(RESPONSE_FIELDS[2], this@EpisodeDetail.name)
    writer.writeString(RESPONSE_FIELDS[3], this@EpisodeDetail.created)
    writer.writeString(RESPONSE_FIELDS[4], this@EpisodeDetail.air_date)
    writer.writeString(RESPONSE_FIELDS[5], this@EpisodeDetail.episode)
    writer.writeList(RESPONSE_FIELDS[6], this@EpisodeDetail.characters) { value, listItemWriter ->
      value?.forEach { value ->
        listItemWriter.writeObject(value?.marshaller())}
    }
  }

  fun charactersFilterNotNull(): List<Character>? = characters?.filterNotNull()

  companion object {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
        ResponseField.forString("name", "name", null, true, null),
        ResponseField.forString("created", "created", null, true, null),
        ResponseField.forString("air_date", "air_date", null, true, null),
        ResponseField.forString("episode", "episode", null, true, null),
        ResponseField.forList("characters", "characters", null, true, null)
        )

    val FRAGMENT_DEFINITION: String = """
        |fragment EpisodeDetail on Episode {
        |  __typename
        |  id
        |  name
        |  created
        |  air_date
        |  episode
        |  characters {
        |    __typename
        |    id
        |    name
        |    image
        |  }
        |}
        """.trimMargin()

    operator fun invoke(reader: ResponseReader): EpisodeDetail = reader.run {
      val __typename = readString(RESPONSE_FIELDS[0])!!
      val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
      val name = readString(RESPONSE_FIELDS[2])
      val created = readString(RESPONSE_FIELDS[3])
      val air_date = readString(RESPONSE_FIELDS[4])
      val episode = readString(RESPONSE_FIELDS[5])
      val characters = readList<Character>(RESPONSE_FIELDS[6]) { reader ->
        reader.readObject<Character> { reader ->
          Character(reader)
        }
      }
      EpisodeDetail(
        __typename = __typename,
        id = id,
        name = name,
        created = created,
        air_date = air_date,
        episode = episode,
        characters = characters
      )
    }

    @Suppress("FunctionName")
    fun Mapper(): ResponseFieldMapper<EpisodeDetail> = ResponseFieldMapper { invoke(it) }
  }

  data class Character(
    val __typename: String = "Character",
    /**
     * The id of the character.
     */
    val id: String?,
    /**
     * The name of the character.
     */
    val name: String?,
    /**
     * Link to the character's image.
     * All images are 300x300px and most are medium shots or portraits since they are intended to be
     * used as avatars.
     */
    val image: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Character.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Character.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Character.name)
      writer.writeString(RESPONSE_FIELDS[3], this@Character.image)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, true, CustomType.ID, null),
          ResponseField.forString("name", "name", null, true, null),
          ResponseField.forString("image", "image", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Character = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val name = readString(RESPONSE_FIELDS[2])
        val image = readString(RESPONSE_FIELDS[3])
        Character(
          __typename = __typename,
          id = id,
          name = name,
          image = image
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Character> = ResponseFieldMapper { invoke(it) }
    }
  }
}
